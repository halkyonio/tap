apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: app-deploy
spec:
  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:yaml", "yaml")

    #@ def img():
    #@ return "/".join([
    #@   data.values.params.image_prefix,
    #@   data.values.workload.metadata.name
    #@   ])
    #@ end
    
    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def merge_annotations(fixed_values):
    #@   annotations = {}
    #@   if hasattr(data.values.workload.metadata, "annotations"):
    #@     annotations.update(data.values.workload.metadata.annotations)
    #@   end
    #@   annotations.update(fixed_values)
    #@   return annotations
    #@ end    
    
    #@ def get_claims_extension():
    #@     return None
    #@ end

    #@ def merge_claims_extension(claim, claims_extension):
    #@   if claims_extension == None:
    #@     return claim.ref
    #@   end
    #@   extension = claims_extension.get(claim.name)
    #@   if extension == None:
    #@      return claim.ref
    #@   end
    #@   extension.update(claim.ref)
    #@   return extension
    #@ end

    #@ def manifest():
    ---
    apiVersion: kapp.k14s.io/v1alpha1
    kind: Config
    rebaseRules:
      - path:
          - metadata
          - annotations
          - serving.knative.dev/creator
        type: copy
        sources: [new, existing]
        resourceMatchers: &matchers
          - apiVersionKindMatcher:
              apiVersion: serving.knative.dev/v1
              kind: Service
      - path:
          - metadata
          - annotations
          - serving.knative.dev/lastModifier
        type: copy
        sources: [new, existing]
        resourceMatchers: *matchers

    ---
    apiVersion: serving.knative.dev/v1
    kind: Service
    metadata:
      name: #@ data.values.workload.metadata.name
    spec:
      template:
        metadata:
          annotations:
            autoscaling.knative.dev/minScale: "1"
            autoscaling.knative.dev/scaleDownDelay: "15m"
          labels:
            tanzu.app.live.view: "true"
            tanzu.app.live.view.application.name: #@ data.values.workload.metadata.name
            tanzu.app.live.view.application.flavours: #@ data.values.params.deliverable_type
            app.kubernetes.io/component: service
            app.tanzu.vmware.com/deliverable-type: #@ data.values.workload.metadata.name
            #@ if/end hasattr(data.values.workload.metadata, "labels") and hasattr(data.values.workload.metadata.labels, "app.kubernetes.io/part-of"):
            app.kubernetes.io/part-of: #@ data.values.workload.metadata.labels["app.kubernetes.io/part-of"]
        spec:
          serviceAccountName: #@ data.values.params.service_account
          containers:
          - name: workload
            image: #@ img()
            securityContext:
              runAsUser: 1000
    
    ---
    #@ claims_extension = get_claims_extension()
    #@ for s in data.values.workload.spec.serviceClaims:
    ---
    apiVersion: services.apps.tanzu.vmware.com/v1alpha1
    kind: ResourceClaim
    metadata:
      name: #@ data.values.workload.metadata.name + '-' + s.name
      annotations: #@ merge_annotations({})
      labels: #@ merge_labels({ "app.kubernetes.io/component": "run", "carto.run/workload-name": data.values.workload.metadata.name })
    spec:
      ref: #@ merge_claims_extension(s, claims_extension)
    ---
    apiVersion: servicebinding.io/v1alpha3
    kind: ServiceBinding
    metadata:
      name: #@ data.values.workload.metadata.name + '-' + s.name
      annotations: #@ merge_annotations({})
      labels: #@ merge_labels({ "app.kubernetes.io/component": "run", "carto.run/workload-name": data.values.workload.metadata.name })
    spec:
      name: #@ s.name
      service:
        apiVersion: services.apps.tanzu.vmware.com/v1alpha1
        kind: ResourceClaim
        name: #@ data.values.workload.metadata.name + '-' + s.name
      workload:
        apiVersion: serving.knative.dev/v1
        kind: Service
        name: #@ data.values.workload.metadata.name
    #@ end
    #@ end

    ---
    apiVersion: kappctrl.k14s.io/v1alpha1
    kind: App
    metadata:
      name: #@ data.values.workload.metadata.name
    spec:
      serviceAccountName: #@ data.values.params.service_account
      fetch:
        - inline:
            paths:
              manifest.yml: #@ yaml.encode(manifest())
      template:
        - ytt: {}
      deploy:
        - kapp: {}